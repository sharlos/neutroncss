// Flexbox
//---------------------------------------------

//Declares the container element of child rows or columns
@mixin flex-container($columns:"", $max-width:960px, $align:"") {
	max-width: $max-width;
	margin-left: auto;
	margin-right: auto;
	display: flex;
	flex-wrap: wrap;

	//create list based on single provided value
	@if type-of($columns) != list and $columns != "" {
		$passed-column: $columns;
		$columns:();
		
		@for $i from 1 through $passed-column {
			$columns: append($columns, $passed-column);
		}
		
	}

	//If argument is a list, set 
	//width of each immediate child 
	//as instructed by passed list
	@if type-of($columns) == list {
		$index: 0;

		@each $column in $columns {	
			$index: $index + 1;

			& > *:nth-child(#{$index}) {
				flex: $column 0 0;
			}
		}
	}
	
	//Set alignment of container
	@if $align != "" {
		@include container-alignment($align);
	}
}

@mixin flex-no-column() {
	flex: none;
}

@mixin flex-container-alignment($align:"") {
	//Set alignment 
	@if $align != "" {
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}

	}
}

@mixin flex-column-padding($padding:"", $flush-padding:false) {
	//if padding argument passed, set padding
	@if $padding != "" {
		& > * {
			padding: $padding;	
		}
	}

	//if padding is set to be flush remove 
	//padding on left and right padding on 
	//the first and last columns respectively.
	@if $flush-padding == true {
		& > * {
			&:first-child {
				padding-left: 0;
			}
			&:last-child {
				padding-right: 0;
			}
		}
	}
}

@mixin flex-push($column, $push-by, $total-columns) {

	& > *:nth-child(#{$column}) {
		left: (100% / $total-columns) * $push-by;
		position: relative;
	}
}


@mixin flex-pull($column, $pull-by, $total-columns) {

	& > *:nth-child(#{$column}) {
		right: (100% / $total-columns) * $pull-by;
		position: relative;
	}
}

@mixin flex-order($order:"") {

	@if type-of($order) == list {
		
		$index: 0;
		@each $column in $order {	
			$index: $index + 1;

			& > *:nth-child(#{$index}) {
				order: $column;
			}
		}
	}
}

//Declares the column elements
@mixin flex-columns($columns:"", $padding:"", $flush-padding:false) { 
	float:left;

	//If column argument passed, set width
	@if $columns != "" {
		
		@if type-of($columns) != list {
					
			width: (100% / $columns);
			
		} @else {
			
			$total: sum($columns);
			$index: 0;
	
			@each $column in $columns {
				$index: $index + 1;
				
				&:nth-child(#{$index}) {
					width: (100% / $total) * $column;
				}
			}
		}
	}
	
	//if padding argument passed set padding
	@if $padding != "" {
		padding: $padding;		
	}

	//if padding is set to be flush remove 
	//padding on left and right padding on 
	//the first and last columns respectively.
	@if $flush-padding == true {
		&:first-child {
			padding-left: 0;
		}
		&:last-child {
			padding-right: 0;
		}
	}
}

//Non-plural alias for columns mixin
@mixin flex-column($columns:"", $padding:"", $flush-padding:false) {
	@include flex-columns($columns, $padding, $flush-padding);
}
